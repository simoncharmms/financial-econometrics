#Financial Econometrics: Multivariate Portfolio Optimization.

#Cleanup
rm(list = ls())

#.rs.restartR()

#Preliminaries

library(quantmod)
library(rugarch)
library(VineCopula)
library(DEoptim)

par(bg="black", fg="grey", col.axis="grey", col.lab="grey", col="grey")

symbolList <- c("PSQ","QQQ","SLV","TLT","BKF")
symbolData <- new.env()
getSymbols(symbolList, sc="yahoo", from="2007-11-20", env=symbolData)

#Declare and consolidate portfolio
Portfolio <- do.call(merge, eapply(symbolData, Cl))
Portfolio = na.omit(Portfolio)
log_return_Portfolio = dailyReturn(Portfolio, type = "log")


chartSeries(Portfolio)

n_data = length(Portfolio[,1])
n_window = 750
n_forecast = 100
#Number of Portfolio: Dimension 2
n_Portfolio = dim(Portfolio)[2]
#Weights inclusive cash (6 weights)
w_Portfolio = array('NA', c(n_data,dim(Portfolio)[2]+1))
v_Portfolio = array(0,n_data)

n_paths = 1000
alpha = 0.02
loss_level = 0.05

v_Portfolio[1:n_window] = rep(100,n_window)
rebalancing_days = seq(n_window+1, n_data-n_forecast, n_forecast)

iter = 50

y=0.05

##Copula-GARCH

#Trouble-shooting: predefining sim_prices
sim_prices = array(0,c(n_paths,dim(Portfolio)[2]))
sim_prices = sim_prices[complete.cases(sim_prices),]
sim_prices_t0 = as.numeric(last(n_window))

for(i in (n_window+1):n_data)
{
  if(i %in% rebalancing_days){
    tryCatch({
      Portfolio_window = Portfolio[(i-n_window):(i-1),]
      log_returns = array(0,c(n_window-1,dim(Portfolio)[2]))
      for(k in 2:n_window){
        log_returns[k-1,] = log(as.numeric(Portfolio_window[k,])) - log(as.numeric(Portfolio_window[k-1,]))
      }
      #GARCH setup fit and residual vectors
      garch.setup = ugarchspec(mean.model = list(armaOrder=c(0,0),include.mean=TRUE),variance.model = list(model="sGARCH",garchOrder=c(1,1)),distribution.model="sstd")
      
      fit_vector = list()
      residuals_vector = array(0,c(dim(Portfolio_window)[1]-1,dim(Portfolio)[2]))
      
      for (k in 1:dim(Portfolio)[2]){
        fit_vector[[k]] = ugarchfit(garch.setup, data = log_returns[,k], solver = 'hybrid')
        residuals_vector[,k] = residuals(object=fit_vector[[k]], standardize = TRUE)
      }
      
      #Combine to univariate data matrix
      udata = matrix(nrow = dim(residuals_vector)[1], ncol = dim(Portfolio)[2])
      
      #Stepwise calculation of udata
      for (k in 1:dim(Portfolio)[2]){
        udata[,k] = pdist(distribution = "sstd", residuals_vector[,k], skew = coef(fit_vector[[k]])[5], shape = coef(fit_vector[[k]])[6])
      }
      
      #Creating the sstd (2) copula structure
      copula_structure <- RVineStructureSelect(udata, familyset = c(2,4,14,24,34))
      #RVineTreePlot(copula_structure)
      
      #Each line out of the copula is a realisation and iid to the preceding line
      sim_udata = RVineSim(n_paths * n_forecast, copula_structure)
      sim_prices = array(0,c(n_paths,dim(Portfolio)[2]))
      
      #Determining the final prices per column
      for (k in 1:dim(Portfolio)[2]){
        #each column is one future path, we simulate 100 day (100 lines) and sort the vector for skwe and shape
        sim_sstd_vector = matrix(qdist(distribution ="sstd", sim_udata[,k], skew = coef(fit_vector[[k]])[5], shape = coef(fit_vector[[k]])[6]), nrow=n_forecast, ncol=n_paths)
        #putting it into GARCH
        sim_log_returns = ugarchsim(fit_vector[[k]], n.sim=n_forecast, n.start=0, m.sim=n_paths, startMethod="sample", custom.dist = list(name ="sample", distfit = sim_sstd_vector, type="z"))
        sim_prices[,k] = as.numeric(last(Portfolio_window)[,k]) * exp(colSums(fitted(sim_log_returns)))
      }
      
      #Determining the VaR using global optimization
      sim_prices = sim_prices[complete.cases(sim_prices), ]
      #Defining the starting values
      sim_prices_t0 = as.numeric(last(Portfolio_window))
      
    }, error=function(e) e, warning=function(w) w)
    

    full_optim_function <- function(weights){
      portfolio_return <- array(0,dim=dim(sim_prices)[1])
      for (k in 1:dim(sim_prices)[1]){
        #Which profit would be realised in each asset and multiplying it with the weight. Cash profit is 0.
        portfolio_return[k] <- sum(weights * (sim_prices[k,] - sim_prices_t0) / sim_prices_t0) + (1-sum(weights)) * 0.01
      }
      #"Bestrafungsfunktion" with 1e3, sum of weights must not be greater then 1 (no lever)
      r <- -mean(portfolio_return) + 1e3 * max(-quantile(portfolio_return, alpha, type=1)*sqrt(250/n_forecast) - loss_level, 0) + 1e3 * max(sum(weights)-1,0)
      return(r)
    }
    
    outDEoptim_results <- DEoptim(full_optim_function, rep(0,dim(Portfolio)[2]), rep(1,dim(Portfolio)[2]), DEoptim.control(NP = dim(Portfolio)[2]*10, itermax = iter, trace = FALSE))
    
    #Saving the weights inclusive cash
    w_Portfolio[i,] = c(1-sum(outDEoptim_results$optim$bestmem), as.numeric(outDEoptim_results$optim$bestmem))
  }else{}
  
  #Calculating the new wealth under assumption of the new weights
  if(!w_Portfolio[i,1]=='NA'){
    u_Portfolio = as.numeric(w_Portfolio[i,]) * v_Portfolio[i-1] / c(1,Portfolio[i-1,])
  }else{}
  v_Portfolio[i] =sum(u_Portfolio * c(1,Portfolio[i,]))
  
  cat("Working on Copula-GARCH in step: ", i, "\n")
}



#Loops for displaying the performance analysis
Optimized = Portfolio[,1]
for(i in 1:n_data)
{
  Optimized[i] = v_Portfolio[i]
}

#Log returns of the optimized portfolio for charts
log_return_Optimized = dailyReturn(Optimized, type = "log")

#Plot an equal weighted strategy
Equal_weighted = Optimized
for(i in (n_window+1):n_data)
{
  Equal_weighted[i] = Equal_weighted[i-1] * (1 + mean((as.numeric(Portfolio[i,])-as.numeric(Portfolio[i-1,]))/as.numeric(Portfolio[i-1,])))
}


##Charts

#Performance-Analysis
chartSeries(Portfolio)
addTA(Optimized, on=1, col="orange")
addTA(Equal_weighted, on=1, col="white") 

#Return-Analysis
chartSeries(log_return_Portfolio)
addTA(log_return_Optimized, on=1, col="orange")

#Weight-Analysis
hist(as.numeric(w_Portfolio), col="orange")



##-Compare the Copula-GARCH to an y%-Filter-

#Der erste Wert hat keine Veränderung, ausschließen
Filter <-c(NA) 
#Filter setup
y_percent = Equal_weighted
for (i in (n_window+1):n_data){
  if (log_return_Portfolio[i] > y){
    Filter[i]<- 1
  } else if (log_return_Portfolio[i]< -y){
    Filter[i]<- -1
  } else
    Filter[i]<- 0
}

#Converting to xts object
log_return_YPERCENT <-dailyReturn(Portfolio, type = "log")*trade1

#Plot a performance and loss summary
names(log_return_YPERCENT) <- 'y% Filter'
charts.PerformanceSummary(log_return_YPERCENT)
names(log_return_Optimized) <- 'Optimized Portfolio'
charts.PerformanceSummary(log_return_Optimized)



##-VaR backtesting-

##Check Vola Forecasts from GARCH model via V@R Formula
#Specify GARCH model to sstd
garch.setup = ugarchspec(mean.model = list(armaOrder=c(0,0),include.mean=TRUE),variance.model = list(model="sGARCH",garchOrder=c(1,1)),distribution.model="sstd")

#Estimate GARCH model by determining the next day return m times
fit = ugarchfit(garch.setup, data=log_return_Portfolio, solver = "hybrid")
residuals_vector = residuals(object=fit, standardize=TRUE)
sim_returns = fitted(ugarchsim(fit, n.sim=1, n.start=0, m.sim=n_paths, startMethod = "sample"))

hist(as.numeric(sim_returns), col="orange", ylim=c(0,5000),xlim=c(-0.2,0.2))

#Checking with the empirical V@R value
VaR = quantile(sim_returns, alpha)
VaR

#Set V@R = log_returns in order to get the return of the last day
VaR = log_return_Portfolio

#Integrating the rolling window using sstd
for (i in n_window:(n_data-1)){
  log_returns_rw = log_return_Portfolio[(i-n_window+1):i]
  tryCatch({fit = ugarchfit(garch.setup, data=log_returns_rw, solver = "hybrid")}, error=function(e) e, warning=function(w) w)
  sim_returns = fitted(ugarchsim(fit, n.sim=1, n.start=0, m.sim=n_paths, startMethod = "sample"))
  VaR[i+1] = quantile(sim_returns, alpha)
  cat("Working on: VaR estimation in step ", i, "\n")
}

#Check, whether GARCH-volatility forecasts correspond to empirical VaR
sum(as.numeric(log_return_Portfolio)<as.numeric(VaR)) / (n_data-n_window)

#Check optically, whether retur histograms match
hist(sim_returns, col=ifelse(sim_returns==100, "red", "orange"), ylim=c(0,5000),xlim=c(-0.2,0.2))
hist(log_return_Portfolio, col="green", ylim=c(0,5000),xlim=c(-0.2,0.2))


chartSeries(log_return_Portfolio)
addTA(VaR, on=1, col="chocolate")

#Alternativer Plot
VaRplot(alpha, log_return_Portfolio, VaR)

#unconditional (Kupiec) and conditional(Christoffersen) coverage tests for the correct number of exceedances
VaRTest(alpha, log_return_Portfolio, VaR)

#Conduct Christoffersen VaR Backtest
VaRDurTest(alpha, log_return_Portfolio, VaR)




